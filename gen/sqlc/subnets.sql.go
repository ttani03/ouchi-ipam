// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: subnets.sql

package sqlc

import (
	"context"
)

const createSubnet = `-- name: CreateSubnet :one
INSERT INTO subnets (
    name, network_address, mask_length, gateway, name_server, description
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, name, network_address, mask_length, gateway, name_server, description
`

type CreateSubnetParams struct {
	Name           string  `json:"name"`
	NetworkAddress int64   `json:"network_address"`
	MaskLength     int32   `json:"mask_length"`
	Gateway        *int64  `json:"gateway"`
	NameServer     *int64  `json:"name_server"`
	Description    *string `json:"description"`
}

func (q *Queries) CreateSubnet(ctx context.Context, arg CreateSubnetParams) (Subnet, error) {
	row := q.db.QueryRow(ctx, createSubnet,
		arg.Name,
		arg.NetworkAddress,
		arg.MaskLength,
		arg.Gateway,
		arg.NameServer,
		arg.Description,
	)
	var i Subnet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NetworkAddress,
		&i.MaskLength,
		&i.Gateway,
		&i.NameServer,
		&i.Description,
	)
	return i, err
}

const deleteSubnet = `-- name: DeleteSubnet :exec
DELETE FROM subnets
WHERE id = $1
`

func (q *Queries) DeleteSubnet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSubnet, id)
	return err
}

const getSubnet = `-- name: GetSubnet :one
SELECT id, name, network_address, mask_length, gateway, name_server, description FROM subnets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubnet(ctx context.Context, id int32) (Subnet, error) {
	row := q.db.QueryRow(ctx, getSubnet, id)
	var i Subnet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NetworkAddress,
		&i.MaskLength,
		&i.Gateway,
		&i.NameServer,
		&i.Description,
	)
	return i, err
}

const getSubnets = `-- name: GetSubnets :many
SELECT id, name, network_address, mask_length, gateway, name_server, description FROM subnets
`

func (q *Queries) GetSubnets(ctx context.Context) ([]Subnet, error) {
	rows, err := q.db.Query(ctx, getSubnets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subnet{}
	for rows.Next() {
		var i Subnet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NetworkAddress,
			&i.MaskLength,
			&i.Gateway,
			&i.NameServer,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
