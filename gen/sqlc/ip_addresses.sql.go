// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: ip_addresses.sql

package sqlc

import (
	"context"
)

const freeIPAddress = `-- name: FreeIPAddress :exec
DELETE FROM ip_addresses
WHERE subnet_id = $1 AND ip_address = $2
`

type FreeIPAddressParams struct {
	SubnetID  int32 `json:"subnet_id"`
	IpAddress int64 `json:"ip_address"`
}

func (q *Queries) FreeIPAddress(ctx context.Context, arg FreeIPAddressParams) error {
	_, err := q.db.Exec(ctx, freeIPAddress, arg.SubnetID, arg.IpAddress)
	return err
}

const getIPAddresses = `-- name: GetIPAddresses :many
SELECT id, subnet_id, ip_address, hostname FROM ip_addresses
WHERE subnet_id = $1
ORDER BY ip_address ASC
`

func (q *Queries) GetIPAddresses(ctx context.Context, subnetID int32) ([]IpAddress, error) {
	rows, err := q.db.Query(ctx, getIPAddresses, subnetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IpAddress{}
	for rows.Next() {
		var i IpAddress
		if err := rows.Scan(
			&i.ID,
			&i.SubnetID,
			&i.IpAddress,
			&i.Hostname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reserveIPAddress = `-- name: ReserveIPAddress :one
INSERT INTO ip_addresses (
    subnet_id, ip_address, hostname
) VALUES (
    $1, $2, $3
)
RETURNING id, subnet_id, ip_address, hostname
`

type ReserveIPAddressParams struct {
	SubnetID  int32  `json:"subnet_id"`
	IpAddress int64  `json:"ip_address"`
	Hostname  string `json:"hostname"`
}

func (q *Queries) ReserveIPAddress(ctx context.Context, arg ReserveIPAddressParams) (IpAddress, error) {
	row := q.db.QueryRow(ctx, reserveIPAddress, arg.SubnetID, arg.IpAddress, arg.Hostname)
	var i IpAddress
	err := row.Scan(
		&i.ID,
		&i.SubnetID,
		&i.IpAddress,
		&i.Hostname,
	)
	return i, err
}
